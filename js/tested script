// ================ does not work loses this.innerHTML =========
				// sort the data
			// if (contacts_list.length) {
			// 	contacts_list
			// 		.sort(function(a, b) {
			// 			console.log(333333333, contacts_list)
			// 			return a.id < b.id ? -1 : (a.id > b.id ? 1 : 0);
			// 		})
			// 		.forEach(Contacts.tableAdd);
			// }

		function scopepreserver() {
			return function() {
				var string = this.innerText;
				var tableHeader = string.toLowerCase();
				console.log('tableHeader= ', tableHeader)
				if (contacts_list.length) {
					contacts_list
						.sort(function(a, b) {
							console.log('a.company= ', a.company)//okay shows name of company
							console.log(222222222, a, b) // undefined

							//console.log(222222222, a[0]) // undefined
							//console.log(222222222, a[x]) // undefined
							//console.log('a.tableHeader= ', a.tablHeader) //undefined
							//console.log('contacts_list= ', contacts_list) //ok shows list
							// console.log(222222222, [a].tableHeader)//undefined
							// console.log(222222222, a,tableHeader) //object{}, company
							// console.log('a.tableHeader= ', a.[tableHeader]) //Uncaught SyntaxError: Unexpected token [
							//console.log('a.tableHeader= ', a.["tableHeader"])//Uncaught SyntaxError: Unexpected token [
							// console.log('a.tableHeader= ', a.["'tableHeader'"])//Uncaught SyntaxError: Unexpected token [
							//console.log('a.tableHeader= ', a.["'tableHeader'"])//Uncaught SyntaxError: Unexpected token [

							return a.company < b.company ? -1 : (a.company > b.company ? 1 : 0);
						})
						.forEach(Contacts.tableAdd);
				}	
			};
		}
	}

// =============== test sort

// function scopepreserver() {
//   	return function () {
//   	var string = this.innerText;
//   	var tableHeader = string.toLowerCase();
//   	console.log(22222222, tableHeader);
// 	if (contacts_list.length) {
// 		contacts_list
// 			.sort(function(a, b) {
// 				console.log(333333333, tableHeader)
// 				//var tableHeader = 'company'
// 				return a.tableHeader < b.tableHeader ? -1 : (a.tableHeader > b.tableHeader ? 1 : 0);
// 			})
// 			//.forEach(Contacts.tableAdd);
// 	}

// 	// ================= test to compare above code ===================
// 	var x = 'company'
//   	if (x === 'company') {
//   		console.log('iffy worked')
// 			contacts_list
//   				.sort(function(a, b) {//a, b = Object {address1: "2" address2: "3" city: "z" company: "b"
//   											//a[x], b[x] = company name (i.e. b, a, a, z)
//   					console.log(44444444, a.company)
// 					// return a['x'] < a['x'] ? -1 : (a['x'] > a['x'] ? 1 : 0);
// 					return a.company < a.company ? -1 : (a.company > a.company ? 1 : 0);
//   				})
//   				.forEach(Contacts.tableAdd);
//   	}
// 	// =======================================================================

 //   };
 // }






	if (contacts_list.length){
		var titles = document.getElementsByTagName("th");
		for ( var i = 0; i< titles.length; i++ ) { 
			titles[i].addEventListener("click", function() {
				contacts_list.sort(function(a, b){
					console.log(222222222, this.innerHTML)
					return a.address1 < b.address1 ? -1 : (a.address1 > b.address1 ? 1 : 0);
				})
			}, false);
		}
	}

	var titles = document.getElementsByTagName("th");
		if (contacts_list.length) {
            contacts_list
                .sort(function(a, b) {
					for ( var i = 0; i< titles.length; i++ ) { 
						titles[i].addEventListener("click", function() {
							console.log(222222222, this.innerHTML)
						return a.address1 < b.city ? -1 : (a.city > b.city ? 1 : 0);
						}, false);
					}
                })
  				.forEach(Contacts.tableAdd);     
         }

// =====================does not work sortFunction does not always work
		function sortContacts(){
			if (contacts_list.length) {
				function compareStrings(a, b) {
					a = a.toLowerCase();
					b = b.toLowerCase();
				return (a < b) ? -1 : (a > b) ? 1 : 0;
				}
				contacts_list.sort(function(a, b) {
					if (this.innerHTML === "Company"){
				  		return compareStrings(a.Company, b.Company);
				  	}
				  	if (this.innerHTML === "Address 1"){
				  	 	return compareStrings(a.address1, b.address1);
				  	 }

				})
				.forEach(Contacts.tableAdd);
			}
		}

		var titles = document.getElementsByTagName("th");
		for ( var i = 0; i< titles.length; i++ ) { 
			titles[i].addEventListener("click", function() {
				console.log(222222222, this.innerHTML)
					sortContacts()
			}, false);
		}
// ========================= saved scripts that have not been fully tested ======

function sortData(data) {
    var sorted = [];
    Object.keys(data).sort(function(a,b){
        return data[a].name < data[b].name ? -1 : 1
    }).forEach(function(key){
        sorted.push(data[key]);
    });
    return sorted;
}

function SortLocalStorage(){
   if(localStorage.length > 0){
      var localStorageArray = new Array();
      for (i=0;i<localStorage.length;i++){
          localStorageArray[i] = localStorage.key(i)+localStorage.getItem(localStorage.key(i));
          console.log(77777777, localStorageArray[i])
           //"Contacts:25{"id":"25","company":"d","address1":"1","address2":"2","city":"s","state":"y","zip":"3","notes":"fsdfsdfds","fullName":"d","dept":"w","phone":"2222","email":"werr"}"
           console.log(99999999, window.localStorage)
           //Contacts:21: "{"id":21,"company":"b","address1":"2","address2":"…":"s","dept":"d","phone":"2","email":"sdfgsdfds"}", Contacts:23: "{"id":23,"company":"a","address1":"3","address2":"…lName":"t","dept":"d","phone":"4","email":"jhjh"}", Contacts:24: "{"id":24,"company":"z","address1":"5","address2":"…:"b","dept":"gfhgf","phone":"3","email":"hjghjg"}", Contacts:25: "{"id":"25","company":"d","address1":"1","address2"…me":"d","dept":"w","phone":"2222","email":"werr"}", Contacts:26: "{"id":"26","company":"q","address1":"6","address2"…:"l","dept":"hy","phone":"787","email":"uhighiu"}"  
      }
   }
   var sortedArray = localStorageArray.sort();
   return sortedArray;
}
// tried to make global varable
(function() {
			var globalVar = [];
				function sortByProperty(property) {
				    return function (a, b) {
				        var sortStatus = 0;
				        if (a[property] < b[property]) {
				            sortStatus = -1;
				        } else if (a[property] > b[property]) {
				            sortStatus = 1;
				        }
				 
				        return sortStatus;
				    };
				}
				console.log(3333333333, globalVar)
				 
				//contacts_list.sort(sortByProperty('company'));

		var titles = document.getElementsByTagName("th");
			for ( var i = 0; i < titles.length; i++ ) { 
				titles[i].addEventListener("click", function() {
					globalVar = this.innerHTML;
					console.log(222222222, this.innerHTML)
				}, false);
			globalVar = "test"
			}
		})(); 

function sortData(data) {
		    var sorted = [];
		    Object.keys(data).sort(function(a,b){
		        return data[a].address1 < data[b].address1 ? -1 : 1
		    }).forEach(function(key){
		        sorted.push(data[key]);
		    });
		    return sorted;
		}sortData(window.localStorage)

			if (window.localStorage.length - 1) {
				var contacts_list = [], i, key;
				var localStorageArray = new Array();
				for (i = 0; i < window.localStorage.length; i++) {
					key = window.localStorage.key(i);
					if (/Contacts:\d+/.test(key)) {
						localStorageArray.push(localStorage.key(i)+localStorage.getItem(localStorage.key(i)));
						
						//"{"id":"26","company":"q","address1":"6","address2":"5","city":"r","state":"a","zip":"1","notes":"huguyg","fullName":"l","dept":"hy","phone":"787","email":"uhighiu"}"
					}
				}
			}console.log(8888888, localStorageArray)


					// sorts the data
		// var titles = document.getElementsByTagName("th");
		// // var rows = document.getElementsByTagName("tr");
		// for ( var i = 0; i< titles.length; i++ ) { 
		// 	titles[i].addEventListener("click", function() {
		// 		var x = this.innerText;
		// 		console.log(4444444444, this.innerText)
		// 		if (this.innerText === "company") {
		// 			var y = 'company';
		// 			console.log(222222222, 'it worked')
		// 		}
				
		// 		if (contacts_list.length) {
		// 		contacts_list
		// 			.sort(function(a, b) {
						
		// 				return a.x < b.x ? -1 : (a.x > b.x ? 1 : 0);
		// 			})
		// 			.forEach(Contacts.tableAdd);
		// 	}
		// 	console.log(1111111111, contacts_list)
		// 	console.log(33333333, x)

		// 	}, false);
		// }

// =================== sorts contact list
		// if (contacts_list.length) {
  //           contacts_list
  //               .sort(function(a, b) {
  //                   return a.company < b.company ? -1 : (a.company > b.company ? 1 : 0);
  //               })
  //               .forEach(Contacts.tableAdd);
  // 		}



			// function SortLocalStorage(){
			// 	if(localStorage.length > 0){
			// 		var localStorageArray = new Array();
			// 		for (i = 0; i < window.localStorage.length; i++) {
			// 			key = window.localStorage.key(i);
			// 		if (/Contacts:\d+/.test(key)) {
			// 		localStorageArray[i] = window.localStorage.key(i)+window.localStorage.getItem(window.localStorage.key(i));
			// 		console.log(555555555, localStorageArray[i])
			// 		}
			//    	}
			//    		var sortedArray = localStorageArray;
			//    			sortedArray.sort(function(a, b){
			//    				return a.address1 < b.address1 ? -1 : (a.address1 > b.address1 ? 1 : 0);
			//    			})
			//    		console.log(666666666, sortedArray)
			// 		}
			// 	} SortLocalStorage()

			// if (window.localStorage.length - 1) {
			// 	var contacts_list = [], i, key;
			// 	for (i = 0; i < window.localStorage.length; i++) {
			// 		key = window.localStorage.key(i);
			// 		if (/Contacts:\d+/.test(key)) {
			// 			console.log(7777777, window.localStorage)
			// 		}
			// 	}
   //      	}

			// var titles = document.getElementsByTagName("th");
			// for ( var i = 0; i< titles.length; i++ ) { 
			// 	titles[i].addEventListener("click", function() {
			// 		if (contacts_list.length) {
			//             contacts_list
			//                 .sort(function(a, b) {
			//                 	console.log(2222222, this.innerHTML)
			//                 	if (this.innerHTML === "company") {
			//                 		return a.company < b.company ? -1 : (a.company > b.company ? 1 : 0);
			//                 	}
			//                 })
			//                 console.log(333333333, contacts_list) 
   //       			}
         			//contacts_list.forEach(Contacts.tableAdd);
         			
				//}, false);
			//}
			//console.log(222222222, window.localStorage)

		//}

		// if (contacts_list.length) {
		// 		function compareStrings(a, b) {
		// 			a = a.toLowerCase();
		// 			b = b.toLowerCase();
		// 		return (a < b) ? -1 : (a > b) ? 1 : 0;
		// 		}
		// 		contacts_list.sort(function(a, b) {
		// 		  return compareStrings(a.city, b.city);
		// 		})
		// 		.forEach(Contacts.tableAdd);
		// 	}